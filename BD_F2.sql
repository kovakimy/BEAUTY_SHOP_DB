-- CREATE DATABASE
DROP FUNCTION IF EXISTS CREATE_DATABASE(TEXT);
CREATE OR REPLACE FUNCTION CREATE_DATABASE(DATABASE_NAME_ TEXT) RETURNS VOID AS $$
BEGIN
	IF EXISTS (SELECT FROM pg_database WHERE datname = DATABASE_NAME_) THEN
		RAISE EXCEPTION 'Illegal command' 
      					USING HINT = 'DATABASE ALREADY EXISTS';
	ELSE
		PERFORM dblink_exec('user=ugui password=1111 dbname=' || current_database(), 'CREATE DATABASE ' || DATABASE_NAME_);
	END IF;
END;
$$ LANGUAGE plpgsql;

-- DROP DATABASE
DROP FUNCTION IF EXISTS DROP_DATABASE(TEXT);
CREATE OR REPLACE FUNCTION DROP_DATABASE(DATABASE_NAME_ TEXT) RETURNS VOID AS $$
BEGIN
	IF NOT EXISTS (SELECT FROM pg_database WHERE datname = DATABASE_NAME_) THEN
		RAISE EXCEPTION 'Illegal command' 
      					USING HINT = 'DATABASE NOT EXISTS';
	ELSE
		PERFORM dblink_exec('user=ugui password=1111 dbname=' || current_database(), 'DROP DATABASE ' || DATABASE_NAME_);
	END IF;
END;
$$ LANGUAGE plpgsql;

-- CREATE TRIGGER FUNCTIONS
CREATE OR REPLACE FUNCTION UPDATE_NOSR() RETURNS TRIGGER AS $$ -- UPDATE_NOSR() TRIGGER FUNCTION FOR UPDATE NUMBER OF SPECIALIST'S RECORDS
BEGIN
    IF (TG_OP = 'INSERT') THEN
        UPDATE SPECIALISTS
			SET NUMBER_OF_RECORDS = (SELECT COUNT(*) FROM RECORDS REC WHERE REC.SPECIALIST_ID = NEW.SPECIALIST_ID)
			WHERE ID = NEW.SPECIALIST_ID;
        RETURN NEW;
	ELSIF (TG_OP = 'DELETE') THEN
		UPDATE SPECIALISTS
			SET NUMBER_OF_RECORDS = (SELECT COUNT(*) FROM RECORDS REC WHERE REC.SPECIALIST_ID = OLD.SPECIALIST_ID)
			WHERE ID = OLD.SPECIALIST_ID;
        RETURN OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
		UPDATE SPECIALISTS
			SET NUMBER_OF_RECORDS = (SELECT COUNT(*) FROM RECORDS REC WHERE REC.SPECIALIST_ID = OLD.SPECIALIST_ID)
			WHERE ID = OLD.SPECIALIST_ID;
		UPDATE SPECIALISTS
			SET NUMBER_OF_RECORDS = (SELECT COUNT(*) FROM RECORDS REC WHERE REC.SPECIALIST_ID = NEW.SPECIALIST_ID)
			WHERE ID = NEW.SPECIALIST_ID;
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION UPDATE_BONUS() RETURNS TRIGGER AS $$ -- UPDATE_BONUS() TRIGGER FUNCTION FOR UPDATE DISCOUNT BONUS
BEGIN
    IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') OR (TG_OP = 'DELETE') THEN
		IF (SELECT COUNT(*) FROM RECORDS REC WHERE REC.CLIENT_ID = NEW.CLIENT_ID) < 10 THEN
        	UPDATE DISCOUNT_CARDS
				SET BONUS = '0%'
				WHERE ID = NEW.CLIENT_ID;
        	RETURN NEW;
		ELSIF (((SELECT COUNT(*) FROM RECORDS REC WHERE REC.CLIENT_ID = NEW.CLIENT_ID) >= 10) AND ((SELECT COUNT(*) FROM RECORDS REC WHERE REC.CLIENT_ID = NEW.CLIENT_ID) < 50)) THEN
			UPDATE DISCOUNT_CARDS
				SET BONUS = '5%'
				WHERE ID = NEW.CLIENT_ID;
        	RETURN NEW;
		ELSIF ((SELECT COUNT(*) FROM RECORDS REC WHERE REC.CLIENT_ID = NEW.CLIENT_ID) > 50) THEN
        	UPDATE DISCOUNT_CARDS
				SET BONUS = '15%'
				WHERE ID = NEW.CLIENT_ID;
        	RETURN NEW;
		END IF;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- CREATE TABLES FUNCTION
CREATE OR REPLACE FUNCTION CREATE_TABLES() RETURNS VOID AS $$
	BEGIN
-- SPECIALISTS
			CREATE TABLE SPECIALISTS
			(
			ID SERIAL,
			SPECIALIZATION TEXT,
			NAME_ TEXT UNIQUE,
			PHONE_NUMBER VARCHAR(12) NOT NULL UNIQUE,
			EMAIL VARCHAR(30) NOT NULL,
			NUMBER_OF_RECORDS INT NOT NULL DEFAULT 0,
			PRIMARY KEY(ID)
			);
			
-- CLIENTS
			CREATE TABLE CLIENTS
			(
			ID SERIAL,
			NAME_ TEXT UNIQUE,
			AGE INT NOT NULL,
			SEX VARCHAR(5) NOT NULL,
			PHONE_NUMBER VARCHAR(12) NOT NULL UNIQUE,
			EMAIL VARCHAR(30) NOT NULL,

			PRIMARY KEY(ID)
			);
			
-- RECORDS
			CREATE TABLE RECORDS
			(
			ID SERIAL,
			SPECIALIST_ID INT NOT NULL,
			CLIENT_ID INT NOT NULL,
			DATE_ DATE,
			TIME_ TIME,
			PRIMARY KEY(ID),
			FOREIGN KEY(SPECIALIST_ID) REFERENCES SPECIALISTS(ID),
			FOREIGN KEY(CLIENT_ID) REFERENCES CLIENTS(ID)
			);
			
-- DISCOUNT_CARDS
			CREATE TABLE DISCOUNT_CARDS
			(
			ID SERIAL,
			CLIENT_ID INT NOT NULL UNIQUE,
			BONUS VARCHAR(5) NOT NULL DEFAULT '0%',
			
			PRIMARY KEY(ID),
			FOREIGN KEY(CLIENT_ID) REFERENCES CLIENTS(ID)
			);
-- CREATE INDEX

			CREATE INDEX on SPECIALISTS(SPECIALIZATION);
			CREATE INDEX on CLIENTS(PHONE_NUMBER);

-- CREATE TRIGGERS

			CREATE TRIGGER UPDATE_NUMBER_OF_SPECIALISTS_RECORDS
			AFTER INSERT OR UPDATE OR DELETE ON
				RECORDS FOR EACH ROW EXECUTE PROCEDURE UPDATE_NOSR();
				
			CREATE TRIGGER UPDATE_DISCOUNT_CARDS_BONUS
			AFTER INSERT OR UPDATE ON
				RECORDS FOR EACH ROW EXECUTE PROCEDURE UPDATE_BONUS();
	END
$$ LANGUAGE plpgsql;
				
				
-- FUNCTIONS			
CREATE OR REPLACE FUNCTION ADD_NEW_SPECIALIST(NEW_SPECIALIZATION TEXT, NEW_NAME TEXT, NEW_PHONE_NUMBER VARCHAR(12), NEW_EMAIL VARCHAR(30))
	RETURNS VOID AS
	$$
	BEGIN
  		INSERT INTO SPECIALISTS(SPECIALIZATION, NAME_, PHONE_NUMBER, EMAIL) VALUES(NEW_SPECIALIZATION, NEW_NAME, NEW_PHONE_NUMBER, NEW_EMAIL);
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;
				
CREATE OR REPLACE FUNCTION ADD_NEW_CLIENT(NEW_NAME TEXT, NEW_AGE INT, NEW_SEX VARCHAR(5), NEW_PHONE_NUMBER VARCHAR(12), NEW_EMAIL VARCHAR(30))
	RETURNS VOID AS
	$$
	BEGIN
  		WITH INSERT_CLIENT AS (
			INSERT INTO CLIENTS(NAME_, AGE, SEX, PHONE_NUMBER, EMAIL) VALUES (NEW_NAME, NEW_AGE, NEW_SEX, NEW_PHONE_NUMBER, NEW_EMAIL) RETURNING ID
		)
		INSERT INTO DISCOUNT_CARDS (CLIENT_ID)
		SELECT CL.ID
		FROM INSERT_CLIENT CL;
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;
				
CREATE OR REPLACE FUNCTION ADD_NEW_RECORD(NEW_SPECIALIST_ID INT, NEW_CLIENT_ID INT, NEW_DATE DATE, NEW_TIME TIME)
	RETURNS VOID AS
	$$
	BEGIN
  		INSERT INTO RECORDS(SPECIALIST_ID, CLIENT_ID, DATE_, TIME_) VALUES (NEW_SPECIALIST_ID, NEW_CLIENT_ID, NEW_DATE, NEW_TIME);
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION FIND_SPECIALIST_BY_SPECIALIZATION(F_SPECIALIZATION TEXT)
	RETURNS TABLE(ID INT, SPECIALIZATION TEXT, NAME_ TEXT, PHONE_NUMBER VARCHAR(12), EMAIL VARCHAR(30), NUMBER_OF_RECORDS INT) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT S.ID 
				   FROM SPECIALISTS S 
				   WHERE S.SPECIALIZATION = F_SPECIALIZATION) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_SPECIALIZATION
      					USING HINT = 'Check your SPECIALIZATION';
	END IF;
	RETURN QUERY
		SELECT * FROM SPECIALISTS SPECIALIST
		WHERE SPECIALIST.SPECIALIZATION = F_SPECIALIZATION;

	END;
	$$ LANGUAGE plpgsql;	

CREATE OR REPLACE FUNCTION FIND_CLIENT_BY_PHONE_NUMBER(F_PN VARCHAR(12))
	RETURNS TABLE(ID INT, NAME_ TEXT, AGE INT, SEX VARCHAR(5), PHONE_NUMBER VARCHAR(12), EMAIL VARCHAR(30)) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT C.PHONE_NUMBER 
				   FROM CLIENTS C 
				   WHERE S.PHONE_NUMBER = F_PN) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_PN
      					USING HINT = 'Check your PHONE_NUMBER';
	END IF;
	RETURN QUERY
		SELECT * FROM CLIENTS CLIENT
		WHERE CLIENT.PHONE_NUMBER = F_PN;

	END;
	$$ LANGUAGE plpgsql;	
				
CREATE OR REPLACE FUNCTION FIND_RECORDS_BY_DATE(F_DATE DATE)
	RETURNS TABLE(ID INT, SPECIALIST_ID INT, CLIENT_ID INT, DATE_ DATE, TIME_ TIME) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT R.DATE_ 
				   FROM RECORDS R 
				   WHERE R.DATE_ = F_DATE) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_DATE
      					USING HINT = 'Check your DATE';
	END IF;
	RETURN QUERY
		SELECT * FROM RECORDS RECORD
		WHERE RECORD.DATE_ = F_DATE;

	END;
	$$ LANGUAGE plpgsql;
	
					
CREATE OR REPLACE FUNCTION FIND_RECORDS_BY_ID(F_ID INT)
	RETURNS TABLE(ID INT, SPECIALIST_ID INT, CLIENT_ID INT, DATE_ DATE, TIME_ TIME) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT R.ID 
				   FROM RECORDS R 
				   WHERE R.ID = F_ID) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_ID
      					USING HINT = 'Check your ID';
	END IF;
	RETURN QUERY
		SELECT * FROM RECORDS RECORD
		WHERE RECORD.ID = F_ID;

	END;
	$$ LANGUAGE plpgsql;	

CREATE OR REPLACE FUNCTION FIND_CLIENT_BY_ID(F_ID INT)
	RETURNS TABLE(ID INT, NAME_ TEXT, AGE INT, SEX VARCHAR(5), PHONE_NUMBER VARCHAR(12), EMAIL VARCHAR(30)) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT C.ID 
				   FROM CLIENTS C 
				   WHERE C.ID = F_ID) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_ID
      					USING HINT = 'Check your ID';
	END IF;
	RETURN QUERY
		SELECT * FROM CLIENTS CLIENT
		WHERE CLIENT.ID = F_ID;

	END;
	$$ LANGUAGE plpgsql;	

CREATE OR REPLACE FUNCTION FIND_SPECIALIST_BY_ID(F_ID INT)
	RETURNS TABLE(ID INT, SPECIALIZATION TEXT, NAME_ TEXT, PHONE_NUMBER VARCHAR(12), EMAIL VARCHAR(30), NUMBER_OF_RECORDS INT) AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT S.ID 
				   FROM SPECIALISTS S 
				   WHERE S.ID = F_ID) THEN
						RAISE EXCEPTION 'Illegal parameter: %', F_ID
      					USING HINT = 'Check your ID';
	END IF;
	RETURN QUERY
		SELECT * FROM SPECIALISTS SPECIALIST
		WHERE SPECIALIST.ID = F_ID;

	END;
	$$ LANGUAGE plpgsql;		
	
CREATE OR REPLACE FUNCTION UPDATE_RECORD(ID_ INT, NEW_SPECIALIST_ID INT, NEW_CLIENT_ID INT, NEW_DATE DATE, NEW_TIME TIME)
	RETURNS VOID AS
	$$
	BEGIN
  		UPDATE RECORDS
		SET SPECIALIST_ID = NEW_SPECIALIST_ID,
			CLIENT_ID = NEW_CLIENT_ID,
			DATE_ = NEW_DATE,
			TIME_ = NEW_TIME
		WHERE ID = ID_;
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;
	
CREATE OR REPLACE FUNCTION UPDATE_CLIENT(ID_ INT, NEW_NAME VARCHAR(20), NEW_AGE INT, NEW_SEX VARCHAR(5), NEW_PHONE_NUMBER VARCHAR(12), NEW_EMAIL VARCHAR(30))
	RETURNS VOID AS
	$$
	BEGIN
  		UPDATE CLIENTS
		SET NAME_ = NEW_NAME,
			AGE = NEW_AGE,
			SEX = NEW_SEX,
			PHONE_NUMBER = NEW_PHONE_NUMBER,
			EMAIL = NEW_EMAIL
		WHERE ID = ID_;
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;	
	
CREATE OR REPLACE FUNCTION UPDATE_SPECIALIST(ID_ INT, NEW_SPECIALIZATION TEXT, NEW_NAME TEXT, NEW_PHONE_NUMBER VARCHAR(12), NEW_EMAIL VARCHAR(30))
	RETURNS VOID AS
	$$
	BEGIN
  		UPDATE SPECIALISTS
		SET SPECIALIZATION = NEW_SPECIALIZATION,
			NAME_ = NEW_NAME,
			PHONE_NUMBER = NEW_PHONE_NUMBER,
			EMAIL = NEW_EMAIL
		WHERE ID = ID_;
	EXCEPTION
 		WHEN unique_violation THEN
    		RAISE EXCEPTION 'Illegal operation: %', SQLERRM;
	END;
	$$ LANGUAGE plpgsql;		

CREATE OR REPLACE FUNCTION DELETE_SPECIALIST(ID_TO_DELETE INT)
	RETURNS VOID AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT S.ID 
				   FROM SPECIALISTS S 
				   WHERE S.ID = ID_TO_DELETE) THEN
						RAISE EXCEPTION 'Illegal parameter: %', ID_TO_DELETE
      					USING HINT = 'Check your ID';
	END IF;
  	DELETE FROM SPECIALISTS SPECIALIST
		WHERE SPECIALIST.ID = ID_TO_DELETE;
	END;
	$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION DELETE_CLIENT(ID_TO_DELETE INT)
	RETURNS VOID AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT C.ID 
				   FROM CLIENTS C 
				   WHERE C.ID = ID_TO_DELETE) THEN
						RAISE EXCEPTION 'Illegal parameter: %', ID_TO_DELETE
      					USING HINT = 'Check your ID';
	END IF;
	DELETE FROM DISCOUNT_CARDS CARD_
		WHERE CARD_.CLIENT_ID = ID_TO_DELETE;
  	DELETE FROM CLIENTS CLIENT
		WHERE CLIENT.ID = ID_TO_DELETE;

	END;
	$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION DELETE_RECORD(ID_TO_DELETE INT)
	RETURNS VOID AS
	$$
	BEGIN
	IF NOT EXISTS (SELECT R.ID 
				   FROM RECORDS R 
				   WHERE R.ID = ID_TO_DELETE) THEN
						RAISE EXCEPTION 'Illegal parameter: %', ID_TO_DELETE
      					USING HINT = 'Check your ID';
	END IF;
  	DELETE FROM RECORDS RECORD
		WHERE RECORD.ID = ID_TO_DELETE;
	END;
	$$ LANGUAGE plpgsql;